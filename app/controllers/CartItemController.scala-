package controllers

import models.{Cart, CartItem, Item}
import play.api.data.Form
import play.api.data.Forms._
import play.api.libs.json._
import play.api.mvc._

object CartItemController extends Controller {

  def list(cartId: Int) = Action {
    Ok(Json.obj("status" -> "OK"))
  }

  def retrieve(cartId: Int, itemId: Int) = Action {
    Ok(Json.obj("status" -> "OK"))
  }

  val cartItemForm: Form[CartItem] = Form {
    mapping(
      "cartId" -> of[Cart],
      "itemId" -> of[Item]
    )(CartItem.apply)(CartItem.unapply)
  }

  def insert(cartId: Int) = Action(BodyParsers.parse.json) { implicit request =>
    val b = request.body.validate[CartItem]
    b.fold(
      errors => {
        BadRequest(Json.obj("status" -> "OK", "message" -> JsError.toFlatJson(errors)))
      },
      item => {
        Ok(Json.obj("status" -> "OK"))
      }
    )
  }

  def update(cartId: Int, itemId: Int) = Action(BodyParsers.parse.json) { implicit request =>
    val b = request.body.validate[CartItem]
    b.fold(
      errors => {
        BadRequest(Json.obj("status" -> "OK", "message" -> JsError.toFlatJson(errors)))
      },
      item => {
        Ok(Json.obj("status" -> "OK"))
      }
    )
  }

  def delete(cartId: Int, itemId: Int) = Action(BodyParsers.parse.json) { implicit request =>
    val b = request.body.validate[CartItem]
    b.fold(
      errors => {
        BadRequest(Json.obj("status" -> "OK", "message" -> JsError.toFlatJson(errors)))
      },
      item => {
        Ok(Json.obj("status" -> "OK"))
      }
    )
  }
}
